-- Ok here's challenge number one - record two pieces!
--
-- Wondering how to record? In supercollider, just click on the numbers on the bottom right.. You should see a menu with 'start recording' and 'stop recording' - that's what you want! The location of the recorded audio file will be printed in the post window.
--
-- First, make some patterns at a tempo you like, say setcps 0.8, and record them for 2-3 minutes. They don't have to be complicated, but while you record, tweak some parameters, to give the recording some shape.
--
-- Then make a big tempo change, maybe even as much as doubling or halving the tempo, i.e. setcps 0.4 or setcps 1.6.
--
-- Then work with the patterns for a while, until they work well with the tempo, and record that, again while tweaking the patterns a little.
--
-- Then compare them, thinking about the difference that tempo makes to the rhythms that you're working with. Next, leave them some hours, maybe even sleep on it and come back to them the next day. Listen again, without thinking about the code. Do they sound different, if so how? What would you do differently next time?

-- first piece
bpm 60
-- this is rubbish
-- d1 $ s "[foley:210, foley:221]!4" # up "[-4, 8.25]" # attack 1 # release 4 # room (range 0.1 0.5 $ slow 4 sine) # size 0.9 # gain 0.8

-- nope, another false start
-- d1 $ slow 4 $ s "birds insect" <| n (run 10) # speed "{-0.125 0.125}%10"

-- final slo
let bpm x = setcps (x/120/2)

bpm 60

d1 $ every 2 (ply 2) $ s "bass3" <| n "0(3,8)" # note "0 3 5" # octave 5 # release 2 # room 0.1

d2 $ s "[east:6!2, hh!8, [~ snare:6]!2]" # octave 4 # release 0.4 # room 0.2

d4 $ slow 2 $ s "arpy" <| up "[0,4]!4 [0,2]!4" # room 0.1

d5 $ s "can" <| n (shuffle 16 $ run 16) # speed (range 0.25 1 $ slow 3.3 sine) # lpf (range 100 3000 perlin) # lpq 0.5

solo 1
unsolo 1

solo 5
unsolo 5

-----------------
-- fast

bpm 180

d1 $ s "bass3" <| n "0(7,16)" # note "{0 0 3 0 5 7 0 9}%4" # octave "[5,4]" # release 0.5

d2 $ s "cpu2" <| n "0!8"

d4 $ slow 2 $ s "arpy" <| up "[0,4]!16" |+ n (repeatCycles 1024 $ scramble 16 $ run 16)

d5 $ juxBy 0.7 rev $ s "can" <| n (shuffle 8 $ run 8) # lpf (range 100 5000 perlin) # lpq 0.7

solo 2
unsolo 2

solo 4
unsolo 4

d4 silence
d5 silence

solo 1
unsolo 1

d2 silence 

hush


