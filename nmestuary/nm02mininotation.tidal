-- Getting started with the 'mini notation'

-- Play a "kendhang" sound (the first one in the folder)
d1 $ s "kendhang" -- actually kendhang:0

-- Play a different sound from the "kendhang" folder (the fourth one, counting from zero)
d1 $ s "kendhang:3"

-- Play two drum sounds. Notice they fit in the same time as one did above
d1 $ s "kendhang kenong"

-- The more you add, the faster it goes - the 'cycle' stays constant length
d1 $ s "kendhang kenong kendhang kenong"

d1 $ s "kendhang kenong kendhang kenong saron demung peking"

-- the 'Set new tempo' box actually sets the length of the cycle
-- default is 1 % 2 which gives a cycle length of half a second
-- if you have four beats, it is the same as 120 bpm

d1 $ s "kendhang kendhang kendhang kendhang"
-- or (jumping ahead to next lesson!) you could write it like this:
d1 $ s "kendhang!4"

-- if you want to think about bpm in 4/4, then divide by 240
-- eg 'Set new tempo' 135 % 240 gives standard techno tempo of 135 bpm

-- Again, we can pick sounds with : and a number

d1 $ s "demung:6 demung:5 demung:3 demung:2"

-- If they're all from the same folder, it's easier to pattern
-- the sounds using a separate "n" pattern, like this:
d1 $ n "6 5 3 2" # sound "demung"

-- '#' combines together patterns of different kinds, in this case a 'sound'
-- and an 'n' pattern.
-- We'll come back to '#' (and how it differs from '$') in the future!

-- You can have an 'empty' step, a rest, with '~'
d1 $ s "saron demung ~ kendhang"

d1 $ n "6 5 3 2 ~ 3 2 3" # sound "saron"

-- You can also "break down" a step into subsequences with []

-- Lets start with a simple pattern
d1 $ s "saron demung saron demung"

-- And squeeze a two-step subsequence inside that third step:
d1 $ s "saron demung [saron saron] demung"

-- It works for 'n' patterns too
d1 $ n "3 4 [4 4] 4 3 4 2 ~" # sound "saron"

-- to get the effect of damping instead of ringing on we can use 'cut'
-- unfortunately this does not work at the moment, we are trying to fix!
d1 $ n "3 4 [4 4] 4 3 4 2 ~" # sound "saron" # cut 1

-- You can even break down a step inside a subsequence:
d1 $ n "3 4 [4 [4 4]] 4 3 4 2 ~" # sound "saron"

-- You can use more than one subsequence in the same pattern
d1 $ n "[6 5 3 2] [1 4 7]" # sound "saron"
