-- efairbanks
-- Jamming out some nice 5/4 rhythms with the samples from the TidalCycles course a bit here:

bpm 60

d1 $ inside 4 (every 12 (bite 8 "<{5 6 7 2 1}%8>")) $ stack [
  splice 32 (inside 4 (every 5 (const $ "{2 3 4}%8")) $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"
  ,s "{bd ~ ~ bd ~ <~ snare> <snare ~> ~ bd ~}%32"
  ]

-- take apart

d1 $ splice 32 (inside 4 (every 5 (const $ "{2 3 4}%8")) $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"

d1 $ splice 32 (every 5 (const $ "{2 3 4}%8") $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"

jumpIn' 1 0 $ splice 32 "{0 1 2 3 4 9 12 11 13 1}%32" $ s "break"

d2 $ s "909 snare!4" -- use of {}%32 gives weird/non relationship to cycle!


--
bpm 120
-- setcps 0.5

-- iya!! this is a whole composition
d1 $ repeatCycles 4 $ iter "5 2" $  n "5 [1 7] [1 [2 10]] [3 4] [6 8 9 11 12]" # s "{claus cpu2}%16" # shape 0.4 # room (range 0 0.3 perlin) # speed (range 0.25 2 perlin)

-- could take a drifty ambient chord progression

clutchIn 1 16 silence


-------
-- answering question about how to make longer sequence

```
d1 $ n "{0 3 [5 2 2 2 2] 1 2 7 4 3 2 1}%5" # sound "drum"

d1 $ cat [n "0 3 [5 2 2 2 2] 1 2", n "7 4 3 2 1"] # sound "drum"

d1 $ append (n "0 3 [5 2 2 2 2] 1 2") (n "7 4 3 2 1") # sound "drum"

d1 $ slow 2 $ n "0 3 [5 2 2 2 2] 1 2 7 4 3 2 1" # sound "drum"
```

d1 $ slow 4 $ n "0 3 [5 2 2 2 2 2 2 2] [1 1] 0 1 2 0 2 1 0 2 [2 2] 1 0 0 [7 7 7 7] 3 2 [ 1 1]" # sound "drum"

-----------------
-- suggesting different syntax for ranging

d1 $ every (irand 4) (slow (((rand + 1.0)/2.0)*3.0)) $ n "1 0 2 3" # s "bd bd bd bd" # cut 1

d1 $ every (irand 4) (slow $ range 1.5 3 rand) $ n "1 0 2 3" # s "bd" # cut 1

-- rand goes from 0-1
-- ((0 + 1)/2)*3 = 1.5
-- ((1 + 1)/2)*3 = 3.0

-------

-- Hey! does anyone know how I'd be able to get an arpeggiated chord to play in a swung rhythm? eg: d7 $ n (arp "<up>" "<ef4'min7'9>") # sound "superpiano"

bpm 90

d7 $ swing 4 $ n (arp "<up>" "<ef4'min7'9>") <| sound "superpiano!8" # sustain "0.6 1"

jumpIn' 2 0 $ sound "hh!12"


jumpIn' 1 0 $ slow 2 $ swingBy (1/3) 4 $ sound "hh*8"

jumpIn' 1 0 $ slow 2 $ swing 4 $ sound "hh*8"

jumpIn' 2 0 $ sound "cp!12" # gain 0.5


---------------------

d1 $ s "kick [kick/2 kick]"

drawLine "kick [kick/2 kick]"
draw "kick [kick/2 kick]"

d2 $ s "clap"

----------------- @ and %
-- iya very js

d1 $ rarely (hurry "1%4")$ off "1%5 1%3" (|+ n 3) $ iter 4 $ n "1@2%5 <3@2%3 3>!2 2 <5@1%3 5> 8 <9@0.5 9>" # s "claus" # octave 4

-- tidal_version 1.4.9

-- I am going to stream a 30-min long performance in tidal as part of the LCCC (Live coders collective Copenhagen) event. Tonight 8 PM CEST (GMT + 2), here is the link to the streaming. https://www.twitch.tv/inspiralpattern


----------- calum
let (>) = (#)

-- buffer flood like renick, how to?


--------------
-- https://club.tidalcycles.org/t/getting-the-current-cycle-number/459/3?u=tedthetrumpet

-- <$> operator which is an alias for fmap:

let mylist = [0, 2 ..]
    pat = segment 1 $ (mylist !!) <$> sig floor

----------


----- rev

-- I accidentally typed `rev` as a controller, and seem to have stumbled upon a mystery undocumented effect? Sounds like some sort of reverb? But throws and error in SuperCollider if I try to pattern it. Any ideas what is going on here?

-- ```d1 $ s "claus" # rev 0.01

-- d1 $ s "claus" # rev 0.1

-- d1 $ s "claus" # rev 0.5

-- d1 $ s "claus" # rev 0.9
-- d1 $ s "claus" # rev "0.1 0.01 0.5 0.9"
-- > no synth or sample named '0.9' could be found. module 'sound': instrument not found: nil
-- ```
-- 

d1 $ n "0 2 9 3 7 5 6 5" # s "cpu2"






hush