-- efairbanks
-- Jamming out some nice 5/4 rhythms with the samples from the TidalCycles course a bit here:

bpm 60

d1 $ inside 4 (every 12 (bite 8 "<{5 6 7 2 1}%8>")) $ stack [
  splice 32 (inside 4 (every 5 (const $ "{2 3 4}%8")) $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"
  ,s "{bd ~ ~ bd ~ <~ snare> <snare ~> ~ bd ~}%32"
  ]

-- take apart

d1 $ splice 32 (inside 4 (every 5 (const $ "{2 3 4}%8")) $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"

d1 $ splice 32 (every 5 (const $ "{2 3 4}%8") $ "{0 1 2 3 4 9 12 11 13 1}%32") $ s "break"

jumpIn' 1 0 $ splice 32 "{0 1 2 3 4 9 12 11 13 1}%32" $ s "break"

d2 $ s "909 snare!4" -- use of {}%32 gives weird/non relationship to cycle!


--
bpm 120
-- setcps 0.5

-- iya!! this is a whole composition
d1 $ repeatCycles 4 $ iter "5 2" $  n "5 [1 7] [1 [2 10]] [3 4] [6 8 9 11 12]" # s "{claus cpu2}%16" # shape 0.4 # room (range 0 0.3 perlin) # speed (range 0.25 2 perlin)

-- could take a drifty ambient chord progression

clutchIn 1 16 silence


-------
-- answering question about how to make longer sequence

```
d1 $ n "{0 3 [5 2 2 2 2] 1 2 7 4 3 2 1}%5" # sound "drum"

d1 $ cat [n "0 3 [5 2 2 2 2] 1 2", n "7 4 3 2 1"] # sound "drum"

d1 $ append (n "0 3 [5 2 2 2 2] 1 2") (n "7 4 3 2 1") # sound "drum"

d1 $ slow 2 $ n "0 3 [5 2 2 2 2] 1 2 7 4 3 2 1" # sound "drum"
```

d1 $ slow 4 $ n "0 3 [5 2 2 2 2 2 2 2] [1 1] 0 1 2 0 2 1 0 2 [2 2] 1 0 0 [7 7 7 7] 3 2 [ 1 1]" # sound "drum"

-----------------
-- suggesting different syntax for ranging

d1 $ every (irand 4) (slow (((rand + 1.0)/2.0)*3.0)) $ n "1 0 2 3" # s "bd bd bd bd" # cut 1

d1 $ every (irand 4) (slow $ range 1.5 3 rand) $ n "1 0 2 3" # s "bd" # cut 1

-- rand goes from 0-1
-- ((0 + 1)/2)*3 = 1.5
-- ((1 + 1)/2)*3 = 3.0

-------

-- Hey! does anyone know how I'd be able to get an arpeggiated chord to play in a swung rhythm? eg: d7 $ n (arp "<up>" "<ef4'min7'9>") # sound "superpiano"

bpm 90

d7 $ swing 4 $ n (arp "<up>" "<ef4'min7'9>") <| sound "superpiano!8" # sustain "0.6 1"

jumpIn' 2 0 $ sound "hh!12"


jumpIn' 1 0 $ slow 2 $ swingBy (1/3) 4 $ sound "hh*8"

jumpIn' 1 0 $ slow 2 $ swing 4 $ sound "hh*8"

jumpIn' 2 0 $ sound "cp!12" # gain 0.5


---------------------

d1 $ s "kick [kick/2 kick]"

drawLine "kick [kick/2 kick]"
draw "kick [kick/2 kick]"

d2 $ s "clap"

----------------- @ and %
-- iya very js

d1 $ rarely (hurry "1%4")$ off "1%5 1%3" (|+ n 3) $ iter 4 $ n "1@2%5 <3@2%3 3>!2 2 <5@1%3 5> 8 <9@0.5 9>" # s "claus" # octave 4

-- tidal_version 1.4.9

-- I am going to stream a 30-min long performance in tidal as part of the LCCC (Live coders collective Copenhagen) event. Tonight 8 PM CEST (GMT + 2), here is the link to the streaming. https://www.twitch.tv/inspiralpattern


----------- calum
let (>) = (#)

-- buffer flood like renick, how to?


--------------
-- https://club.tidalcycles.org/t/getting-the-current-cycle-number/459/3?u=tedthetrumpet

-- <$> operator which is an alias for fmap:

let mylist = [0, 2 ..]
    pat = segment 1 $ (mylist !!) <$> sig floor

----------


----- rev

-- I accidentally typed `rev` as a controller, and seem to have stumbled upon a mystery undocumented effect? Sounds like some sort of reverb? But throws and error in SuperCollider if I try to pattern it. Any ideas what is going on here?

-- ```d1 $ s "claus" # rev 0.01

-- d1 $ s "claus" # rev 0.1

-- d1 $ s "claus" # rev 0.5

-- d1 $ s "claus" # rev 0.9
-- d1 $ s "claus" # rev "0.1 0.01 0.5 0.9"
-- > no synth or sample named '0.9' could be found. module 'sound': instrument not found: nil
-- ```
--

d1 $ n "0 2 9 3 7 5 6 5" # s "cpu2"

-- trying to answer a question
```d1 $ s "kick" # room 0.2 # size 0.25 # dry 0.25

d1 $ s "kick"```

-------------
drum :: Pattern String -> ControlPattern
drum = n . (subtract 60 . drumN <$>)

drumN :: Num a => String -> a
drumN "bd" = 36
drumN "sn" = 38
drumN "lt" = 43
drumN "ht" = 50
drumN "ch" = 42
drumN "oh" = 46
drumN "cp" = 39
drumN "cl" = 75
drumN "ag" = 67
drumN "cr" = 49
drumN _ = 0

-- then:

d1 $ drum "bd sn ~ ag" # sound "midi"
``
-- You could make aliases for cc messages too. I'd have to think a little bit about how to do that in a nice way that supports multiple CC messages to be patterned at once.


-------------

-- If you want to carry out multiple actions at once, you can use do notation. To apply a function to everything you can use all:

d1 $ n (repeatCycles 4 $ scramble 8 $ run 16) # s "cpu"

do d5 $ sound "bd*4"
   solo 5

-- Then

do unsolo 5
   all $ (# shape 0.8)

-- To take off that effect on all you'd then need to do

all id

-- It'd be good to have a good session or two on different ways of shaping a performance. The problem with solo and all etc is that you have to remember the state they're in. It really needs some UI so you can visually see what is solo'd, etc.

---------- w2 l3 pla

d1 $ reset 1 $ n "0 9 3 [2 4] 5 6 [2 10] 3" # s "cpu2"
  # speed "0.5 5"
  # speed "1 2 3" -- what happens?

-- structure from left, values from the right
d1 $ speed "1 2 0.5" # s "dsynth" # speed "3 4"
-- shorthand
d1 $ speed "1 2 0.5" # s "dsynth" |> speed "3 4"
-- change direction of arrow, values and structure from left
-- second speed does nothing
d1 $ speed "1 2 0.5" # s "dsynth" |< speed "3 4"
-- structure and values from the right
-- first speed not used
d1 $ speed "1 2 0.5" # s "dsynth" >| speed "3 4"
-- structure from right, values from left
-- don't hear the 0.5
d1 $ speed "1 2 0.5" # s "dsynth" <| speed "3 4"
-- addition, values not 'thrown away' but added
d1 $ speed "1 2 0.5" # s "dsynth" +| speed "3 4"
d1 $ speed "1 2 0.5" # s "dsynth" |+ speed "3 4"
-- also multiply
d1 $ speed "1 2 0.5" # s "dsynth" *| speed "3 4"
d1 $ speed "1 2 0.5" # s "dsynth" |* speed "3 4"
-- then suggesting patterning both
d1 $ speed "1(3,8) 2*2 [0.5 1.25]" # s "dsynth" |* speed "<1 0.5 2>"
-- structure can come from both sides
d1 $ speed "1(3,8) 2*3 [0.5 1.25]" # s "dsynth" |*| speed "<1 [0.5 1.5] 2>"
-- in that case just use the operator
d1 $ speed "1(3,8) 2*3 [0.5 1.25]" # s "dsynth" * speed "<1 [0.5 1.5] 2>"
d1 $ speed "1(3,8) 2*3 [0.5 1.25]" # s "dsynth" * speed "<1 [0.5 1.5] 2>"
d1 $ speed "1(3,8) 2*3 [0.5 1.25]" # s "dsynth" - speed "<1 [0.5 1.5] 2>"
-- also combine number patterns within the control pattern
d1 $ speed ("1(3,8) 2*3 [0.5 1.25]" + "<1 [0.5 1.5] 2>") # s "dsynth"


------------------ every play

bpm 160

d1 $ every 5 (# vowel "a e i o u") $ every 3 degrade $ every 4 rev $ s "{can coins e}%13" <| n (run 16) # speed "{0.25 0.5}%5" # room 0.1 # sz 0.9


-----------

-- from https://www.youtube.com/watch?v=PzrSSAjUErA
-- alex doing the tempo challenge

mask "t(3,8)"
mask (iter 4 "t(3,8)")

mask "f(3,8)"
mask (iter 4 "f(3,8)")

qtrigger 2 $ slow 16 envL

d1 $ s "bd future odx kick:4" # begin 0.2

hush